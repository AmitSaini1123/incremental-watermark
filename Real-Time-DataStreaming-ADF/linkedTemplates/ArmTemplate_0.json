{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Real-Time-DataStreaming-ADF"
		},
		"IncrementallyAzureSqlDatabaseDestination_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IncrementallyAzureSqlDatabaseDestination'"
		},
		"IncrementallyAzureSqlDatabaseSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IncrementallyAzureSqlDatabaseSource'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IncrementallyAzureSqlDatabaseDestination')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IncrementallyAzureSqlDatabaseDestination_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementallyAzureSqlDatabaseSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IncrementallyAzureSqlDatabaseSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Employees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementallyAzureSqlDatabaseSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Emp_Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Emp_Name",
						"type": "varchar"
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementallyAzureSqlDatabaseSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementallyAzureSqlDatabaseDestination",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"table": {
						"value": "@dataset().SinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementallyAzureSqlDatabaseDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementallyAzureSqlDatabaseSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementallyAzureSqlDatabaseSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementallyAzureSqlDatabaseDestination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementallyAzureSqlDatabaseDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tbl_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IncrementallyAzureSqlDatabaseDestination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Surrogate_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Emp_Name",
						"type": "varchar"
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "isActive",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IncrementallyAzureSqlDatabaseDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupOldWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from watermarktable where TableName  =  '@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "WatermarkDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "LookupNewWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select MAX(@{item().WaterMark_Column}) as NewWatermarkvalue from @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "IncrementalCopyActivity",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupOldWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "LookupNewWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column} > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and @{item().WaterMark_Column} <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"sqlWriterStoredProcedureName": {
												"value": "@{item().StoredProcedureNameForMergeOperation}",
												"type": "Expression"
											},
											"sqlWriterTableType": {
												"value": "@{item().TableType}",
												"type": "Expression"
											},
											"storedProcedureTableTypeParameterName": {
												"value": "@{item().TABLE_NAME}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkDataset",
											"type": "DatasetReference",
											"parameters": {
												"SinkTableName": "@{item().TABLE_NAME}"
											}
										}
									]
								},
								{
									"name": "StoredProceduretoWriteWatermarkActivity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "IncrementalCopyActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "IncrementallyAzureSqlDatabaseDestination",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tableList": {
						"type": "array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/IncrementallyAzureSqlDatabaseDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SlowlyChangingDimensionType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employees",
								"type": "DatasetReference"
							},
							"name": "EmployeeDbSource"
						},
						{
							"dataset": {
								"referenceName": "tbl_employee",
								"type": "DatasetReference"
							},
							"name": "EmployeeDbDestination"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tbl_employee",
								"type": "DatasetReference"
							},
							"name": "sinkDataSet"
						},
						{
							"dataset": {
								"referenceName": "tbl_employee",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "addisActive"
						},
						{
							"name": "RenameColumn"
						},
						{
							"name": "lookupActivity"
						},
						{
							"name": "ExitingRows"
						},
						{
							"name": "DropColumn"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Emp_Id as integer,",
						"          Emp_Name as string,",
						"          Gender as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EmployeeDbSource",
						"source(output(",
						"          Surrogate_key as integer,",
						"          Emp_id as integer,",
						"          Emp_Name as string,",
						"          Gender as string,",
						"          Country as string,",
						"          isActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EmployeeDbDestination",
						"EmployeeDbSource derive(isActive = 1) ~> addisActive",
						"EmployeeDbDestination select(mapColumn(",
						"          SQL_Surrogate_key = Surrogate_key,",
						"          SQL_Emp_id = Emp_id,",
						"          SQL_Emp_Name = Emp_Name,",
						"          SQL_Gender = Gender,",
						"          SQL_Country = Country,",
						"          SQL_isActive = isActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameColumn",
						"EmployeeDbSource, RenameColumn lookup(Emp_Id == SQL_Emp_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupActivity",
						"lookupActivity filter(!isNull(SQL_Emp_id)) ~> ExitingRows",
						"ExitingRows select(mapColumn(",
						"          SQL_Surrogate_key,",
						"          SQL_Emp_id,",
						"          SQL_Emp_Name,",
						"          SQL_Gender,",
						"          SQL_Country,",
						"          SQL_isActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumn",
						"DropColumn derive(SQL_isActive = 0) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(1 ==1)) ~> alterRow1",
						"addisActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surrogate_key as integer,",
						"          Emp_id as integer,",
						"          Emp_Name as string,",
						"          Gender as string,",
						"          Country as string,",
						"          isActive as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Emp_id = Emp_Id,",
						"          Emp_Name,",
						"          Gender,",
						"          Country,",
						"          isActive",
						"     )) ~> sinkDataSet",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surrogate_key as integer,",
						"          Emp_id as integer,",
						"          Emp_Name as string,",
						"          Gender as string,",
						"          Country as string,",
						"          isActive as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Surrogate_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Surrogate_key = SQL_Surrogate_key,",
						"          Emp_id = SQL_Emp_id,",
						"          Emp_Name = SQL_Emp_Name,",
						"          Gender = SQL_Gender,",
						"          Country = SQL_Country,",
						"          isActive = SQL_isActive",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Employees')]",
				"[concat(variables('factoryId'), '/datasets/tbl_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SlowlyChangingDimensionType2Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SlowlyChangingDimensionType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SlowlyChangingDimensionType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeDbSource": {},
									"EmployeeDbDestination": {},
									"sinkDataSet": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SlowlyChangingDimensionType2')]"
			]
		}
	]
}