{
	"name": "dataflow4",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "destination"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "Maxkey"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tbl_employee",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "tbl_employee",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "tbl_employee",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "tbl_employee",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "split1"
				},
				{
					"name": "join3"
				},
				{
					"name": "split2"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_Id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> destination",
				"source(output(",
				"          Maxkey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max(Surrogate_key) as Maxkey from tbl_employee',",
				"     format: 'query') ~> Maxkey",
				"source1 select(mapColumn(",
				"          SRC_Emp_Id = Emp_Id,",
				"          SRC_Emp_Name = Emp_Name,",
				"          SRC_Gender = Gender,",
				"          SRC_Country = Country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, Maxkey join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, destination join(SRC_Emp_Id == Emp_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 split(SRC_Emp_Id == Emp_id,",
				"     disjoint: false) ~> split1@(Match, Unmatched)",
				"split1@Match, destination join(SRC_Country == destination@Country,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> join3",
				"join3 split(SRC_Country == split1@Match@Country,",
				"     disjoint: false) ~> split2@(match, unmatched)",
				"split2@match alterRow(updateIf(1 == 1)) ~> alterRow1",
				"split2@unmatched derive(isActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(split2@unmatched@Emp_id<=Maxkey)) ~> alterRow2",
				"split1@Unmatched sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Emp_id = SRC_Emp_Id,",
				"          Emp_Name = SRC_Emp_Name,",
				"          Gender = SRC_Emp_Name,",
				"          Country = SRC_Country,",
				"          isActive",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Emp_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Emp_id = SRC_Emp_Id,",
				"          Emp_Name = SRC_Emp_Name,",
				"          Gender = SRC_Gender,",
				"          Country = SRC_Country",
				"     )) ~> sink2",
				"split2@unmatched sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Emp_id = SRC_Emp_Id,",
				"          Emp_Name = SRC_Emp_Name,",
				"          Gender = SRC_Gender,",
				"          Country = SRC_Country",
				"     )) ~> sink3",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Emp_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Emp_id = SRC_Emp_Id,",
				"          Emp_Name = SRC_Emp_Name,",
				"          Gender = SRC_Gender,",
				"          Country = SRC_Country,",
				"          isActive",
				"     )) ~> sink4"
			]
		}
	}
}