{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeSourceTable",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "tbl_employee",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tbl_employee",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "tbl_employee",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Emp_Id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(isActive = 1) ~> derivedColumn1",
				"source2 select(mapColumn(",
				"          SQL_Surrogate_key = Surrogate_key,",
				"          SQL_Emp_id = Emp_id,",
				"          SQL_Emp_Name = Emp_Name,",
				"          SQL_Gender = Gender,",
				"          SQL_Country = Country,",
				"          SQL_isActive = isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 lookup(Emp_Id == SQL_Emp_id,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQL_Emp_id)) ~> filter1",
				"filter1 select(mapColumn(",
				"          SQL_Surrogate_key,",
				"          SQL_Emp_id,",
				"          SQL_Emp_Name,",
				"          SQL_Gender,",
				"          SQL_Country,",
				"          SQL_isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(SQL_isActive = 0) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Emp_id = Emp_Id,",
				"          Emp_Name,",
				"          Gender,",
				"          Country,",
				"          isActive",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Surrogate_key as integer,",
				"          Emp_id as integer,",
				"          Emp_Name as string,",
				"          Gender as string,",
				"          Country as string,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Surrogate_key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Surrogate_key = SQL_Surrogate_key,",
				"          Emp_id = SQL_Emp_id,",
				"          Emp_Name = SQL_Emp_Name,",
				"          Gender = SQL_Gender,",
				"          Country = SQL_Country,",
				"          isActive = SQL_isActive",
				"     )) ~> sink2"
			]
		}
	}
}